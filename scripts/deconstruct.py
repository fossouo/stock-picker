# Attempt at deconstructing the code from the quantopian IDE into files that are
# broken out.  This will make the code easier to edit and test.

import os
import sys

STAGE_DIR = "stage/deconstruction"


class Error(Exception):
    """So we can tell the difference between our exceptions and others"""
    pass


def change_dir_to_project_root():
    """
    We want to work from the root of the project (where .git) is.  This will
    help ensure we're not off clobbering the wrong directories.
    """
    while True:
        if os.path.exists(".git"):
            break
        elif len(os.getcwd()) < 5:
            raise Error("Couldn't find project root.  Try running from within the project directory.")
        os.chdir(os.path.pardir)


def ensure_dir_exists():
    dirpath = os.path.dirname(f)


def clobber_existing_src(src_path):
    if not os.path.exists(src_path):
        os.makedirs(src_path)

    for file_name in os.listdir(src_path):
        file_path = os.path.join(src_path, file_name)
        os.remove(file_path)
    
    
def uncomment_import(line):
    if line.startswith("#import ") or line.startswith("#from "):
        return line[1:]
    return line


def open_target(target_name):
    return open(os.path.join(STAGE_DIR, target_name), "w")


### Main ###
def main(args, filelike):
    if not args.dry_run:
        change_dir_to_project_root()
        clobber_existing_src(STAGE_DIR)

    first_line = filelike.readline()
    if "START" not in first_line:
        raise Error("Expect all input to have the START guard in the first line. Instead saw: " + first_line)

    # In the first mode, we just put everything into initialize.py. Once we
    # find the initialize function, we switch into the regular mode of operation.
    target = open_target("initialize")
    saw_def_initialize = False
    for line in filelike:
        processed_line = uncomment_import(line)
        target.write(processed_line)

        if line.startswith("def initialize("):
            saw_def_initialize = True
            break

    if not saw_def_initialize:
        raise Error('Never found "def initialize". Exiting.')


if __name__ == "__main__":

    import argparse
    parser = argparse.ArgumentParser(description='Quantopian algorithm deconstructor. Splits the large single file used in the Quantopian IDE into initialize.py, util.py, and a .py file for each class.  A particular format (as yet undocumented) is expected. Works best with code generated by construct.py')
    parser.add_argument('-d','--dry-run', action='store_const', const=True,
        default=False, help='Dry run. No files will be touched.')

    parser.add_argument('-v','--verbose', action='store_const', const=True, 
        default=False, help="Enable verbose output")

    args = parser.parse_args()
    filelike = sys.stdin

    try:
        main(args, filelike)
    except Error as e:
        print e
        sys.exit(1)
